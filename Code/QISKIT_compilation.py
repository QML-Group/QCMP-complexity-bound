import qiskit
from qiskit import transpile, IBMQ
from qiskit.circuit.quantumcircuit import QuantumCircuit
import math
import matplotlib.pyplot as plt
import qiskit
from qiskit import Aer, dagcircuit
from qiskit.transpiler import CouplingMap
from qiskit.providers.fake_provider import ConfigurableFakeBackend, FakeMelbourne
from qiskit.scheduler import measure
from qiskit.circuit.library import DraperQFTAdder, QuantumVolume, CDKMRippleCarryAdder, QFT
from qiskit.pulse import Schedule, InstructionScheduleMap, DriveChannel, ControlChannel, Play, Gaussian
from qiskit.circuit.random import random_circuit
import os
from openpyxl import load_workbook
from os import listdir
from os.path import isfile, join
import pandas as pd
from qiskit.visualization import plot_gate_map


curdir = os.path.dirname(__file__)

# # Define your quantum circuit
benchmarks_dir = os.path.join(curdir,"FOLDER WITH OPENQASM FILES")
benchmarks = [f for f in listdir(benchmarks_dir) if join(benchmarks_dir, f)] 

# # # Choose the target device
devices_coupling_maps = [("IBM Athens" ,[[0,1],[1,2],[2,3],[3,4],[1, 0], [2, 1], [3, 2], [4, 3]]),
                         ("Starmon-5",[[2,0],[1,2],[2,3],[4,2], [0, 2], [2, 1], [3, 2], [2, 4]]),
                         ("IBM Yorktown",[[1,0],[2,0],[1,2],[2,3],[4,2],[0, 1], [0, 2], [2, 1], [3, 2], [2, 4]]),
                         ("IBM Ourense",[[0,1],[1,2],[1,3],[3,4],[1, 0], [2, 1], [3, 1], [4, 3]]),
                         ("Surface-7",[[2,0],[2,5],[5,3], [0,3],[3,1],[3,6],[6,4],[4,1],[0, 2], [5, 2], [3, 5], [3, 0], [1, 3], [6, 3], [4, 6], [1, 4]]),
                         ("IBM Casablanca",[[0,1],[1,2],[1,3],[3,5],[4,5],[5,6],[1, 0], [2, 1], [3, 1], [5, 3], [5, 4], [6, 5]]),
                         ("Rigetti Agave",[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[0,7],[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [7, 0]]),
                         ("IBM Melbourne",[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,8],[8,7],[8,9],[9,10],[10,11],[11,12],[12,13],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8],[0,14],[13,14],[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[8,6],[7,8],[9,8],[10,9],[11,10],[12,11],[13,12],[13,1],[12,2],[11,3],[10,4],[9,5],[8,6],[14,0],[14,13]]),
                         ("Rigetti Aspen-1",[[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[0,7],[2,8],[3,9],[8,9],[8,10],[11,12],[12,13],[13,14],[14,15],[15,9],[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[7,0],[8,2],[9,3],[9,8],[10,8],[12,11],[13,12],[14,13],[15,14],[9,15]]),
                         ("Surface-17",[[2,0],[4,1],[0,3],[1,5],[2,6],[6,3],[4,7],[7,5],[5,8],[8,6],[6,9],[7,10],[10,8],[8,11],[11,9],[9,12],[13,10],[10,14],[14,11],[11,15],[15,12],[13,16],[16,14],[0,2],[1,4],[3,0],[5,1],[6,2],[3,6],[7,4],[5,7],[8,5],[6,8],[9,6],[10,7],[8,10],[9,11],[12,9],[10,12],[10,13],[14,10],[11,14],[15,11],[12,15],[16,13],[14,16]]),
                         ("IBM Singapore", [[0,1],[1,2],[2,3],[3,4],[1,6],[3,8],[5,6],[6,7],[8,7],[8,9],[5,10],[7,12],[9,14],[10,11],[11,12],[12,13],[13,14],[11,16],[13,18],[15,16],[16,17],[17,18],[18,19], [1,0],[2,1],[3,2],[4,3],[6,1],[8,3],[6,5],[7,6],[7,8],[9,8],[10,5],[12,7],[14,9],[11,10],[12,11],[13,12],[14,13],[16,11],[18,13],[16,15],[17,16],[18,17],[19,18]]),
                         ("IBM Johannesburg",[[0,1],[1,2],[2,3],[3,4],[0,5],[4,9],[5,6],[6,7],[8,7],[8,9],[5,10],[7,12],[9,14],[10,11],[11,12],[12,13],[13,14],[10,15],[14,19],[15,16],[16,17],[17,18],[18,19],[1,0],[2,1],[3,2],[4,3],[5,0],[9,4],[6,5],[7,6],[7,8],[9,8],[10,5],[12,7],[14,9],[11,10],[12,11],[13,12],[14,13],[15,10],[19,14],[16,15],[17,16],[18,17],[19,18]]),
                         ("IBM Tokyo",[[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8],[4,9],[1,7],[2,6],[3,9],[4,8],[5,6],[6,7],[8,7],[8,9],[5,10],[6,11],[7,12],[8,13],[9,14],[5,11],[6,10],[7,13],[8,12],[10,11],[11,12],[12,13],[13,14],[10,15],[11,16],[12,17],[13,18],[14,19],[11,17],[12,16],[13,19],[14,18],[15,16],[16,17],[17,18],[18,19], [1,0],[2,1],[3,2],[4,3],[5,0],[6,1],[7,2],[8,3],[9,4],[7,1],[6,2],[9,3],[8,4],[6,5],[7,6],[7,8],[9,8],[10,5],[11,6],[12,7],[13,8],[14,9],[11,5],[10,6],[13,7],[12,8],[11,10],[12,11],[13,12],[14,13],[15,10],[16,11],[17,12],[18,13],[19,14],[17,11],[16,12],[19,13],[18,14],[16,15],[17,16],[18,17],[19,18]]),
                         ("IBM Paris",[[0,4],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[8,7],[8,9],[9,10],[8,11],[2,12],[6,13],[10,14],[15,12],[19,13],[23,14],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[22,23],[23,24],[17,25],[21,26], [4,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[7,8],[9,8],[10,9],[11,8],[12,2],[13,6],[14,10],[12,15],[13,19],[14,23],[16,15],[17,16],[18,17],[19,18],[20,19],[21,20],[23,22],[24,23],[25,17],[26,21]]),
                         ("IBM Rochester",[[0,1],[1,2],[2,3],[3,4],[0,5],[4,6],[5,9],[6,13],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],
                        [7,16],[16,19],[15,18],[11,17],[17,23],[18,27],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[21,28],[28,32],[25,29],
                        [29,36],[30,31],[31,32], [32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[30,39],[39,42],[34,40],[40,46],[38,41],[41,50],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[44,51],[48,52], [1,0],[2,1],[3,2],[4,3],[5,0],[6,4],[9,5],[13,6],[8,7],[9,8],[10,9],[11,10],[12,11],[13,12],[14,13],[15,14],[16,7],[19,16],[18,15],[17,11],[23,17],[27,18],[20,19],[21,20],[22,21],[23,22],[24,23],[25,24],[26,25],[27,26],[28,21],[32,28],[29,25],[36,29],[31,30],[32,31],[33,32],[34,33],[35,34],[36,35],[37,36],[38,37],[39,30],[42,39],[40,34],[46,40],[41,38],[50,41],[43,42],[44,43],[45,44],[46,45],[47,46],[48,47],[49,48] ,[50,49],[51,44],[52,48]]),
                         ("Google Bristlecone",[[0,1],  [1,2],  [2,3],  [3,4],  [4,5], [5,6],  [6,7], [7,8],  [8,9], [9,10],  [10,11], 
                        [12,13], [13,14],  [14,15],  [15,16], [16,17], [17,18], [18,19],  [19,20], [20,21],  [21,22],  [22,23], 
                        [24,25],  [25,26],  [26,27], [27,28],[28,29], [29,30], [31,32],  [32,33],  [33,34],  [34,35], 
                        [36,37], [37,38],  [38,39],  [39,40], [40,41], [42,43],  [43,44],  [44,45], [45,46],  [46,47], 
                        [48,49],[49,50],[50,51], [51,52],  [52,53], [53,54], [54,55],  [55,56],  [56,57], [57,58], [58,59],
                        [60,61],  [61,62], [62,63],  [63,64], [64,65],  [65,66],  [66,67], [67,68],  [68,69],  [69,70],  [70,71], 
                        [1,12],[1,14],[14,3],[3,16],[16,5],[5,18],[18,7],[7,20],[9,20],[9,22],[22,11],
                        [13,24],[13,26],[15,26],[15,28],[28,17],[30,17],[30,19],[19,32],[32,21],[21,34],[34,23],
                        [25,36],[25,38],[38,27],[40,27],[40,29],[42,29],[42,31],[31,44],[44,33],[33,46],[46,35],
                        [37,48],[37,50],[50,39],[39,52],[52,41],[41,54],[54,43],[43,56],[45,56],[45,58],[58,47],
                        [49,60],[49,62],[62,51],[51,64],[64,53],[53,66],[66,55],[55,68],[68,57],[57,70],[70,59], [1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], 
                        [13, 12], [14, 13], [15, 14], [16, 15], [17, 16], [18, 17], [19, 18], [20, 19], [21, 20], [22, 21], [23, 22], 
                        [25, 24], [26, 25], [27, 26], [28, 27], [29, 28], [30, 29], [32, 31], [33, 32], [34, 33], [35, 34], 
                        [37, 36], [38, 37], [39, 38], [40, 39], [41, 40], [43, 42], [44, 43], [45, 44], [46, 45], [47, 46], 
                        [49, 48], [50, 49], [51, 50], [52, 51], [53, 52], [54, 53], [55, 54], [56, 55], [57, 56], [58, 57], [59, 58], 
                        [61, 60], [62, 61], [63, 62], [64, 63], [65, 64], [66, 65], [67, 66], [68, 67], [69, 68], [70, 69], [71, 70], 
                        [12, 1], [14, 1], [3, 14], [16, 3], [5, 16], [18, 5], [7, 18], [20, 7], [20, 9], [22, 9], [11, 22], 
                        [24, 13], [26, 13], [26, 15], [28, 15], [17, 28], [17, 30], [19, 30], [32, 19], [21, 32], [34, 21], [23, 34], 
                        [36, 25], [38, 25], [27, 38], [27, 40], [29, 40], [29, 42], [31, 42], [44, 31], [33, 44], [46, 33], [35, 46], 
                        [48, 37], [50, 37], [39, 50], [52, 39], [41, 52], [54, 41], [43, 54], [56, 43], [56, 45], [58, 45], [47, 58], 
                        [60, 49], [62, 49], [51, 62], [64, 51], [53, 64], [66, 53], [55, 66], [68, 55], [57, 68], [70, 57], [59, 70]])]





results = pd.read_excel(r'INITIAL PLACEMENT EXCEL')
data = []
for b in benchmarks:
    circuit = QuantumCircuit.from_qasm_file(benchmarks_dir + b)
    b = b.replace('.qasm','')
    print(b)

#New version: Compile for given initial placement on specific device
    for i,row in results.iterrows():
        if b in row['benchmarks names']:
            tolist = row['mapped to subgraph'].split(', EdgeView')
            ip = tolist[1]
            ip = ip[1:-2].replace(')',']').replace('(','[')
            # Transpile the circuit for the target device
            transpiled_circuit = transpile(circuit, coupling_map=eval(ip))
            # Get the number of swaps used
            num_swaps = transpiled_circuit.count_ops().get('swap', 0)
            # Print the number of swaps
            print(f"Number of swaps used: {num_swaps}")
            d = [b, num_swaps, row['device name']]
            data.append(d)

#Old version: Compile for a given device   
    # for dcm in devices_coupling_maps:

    #     max_qubit_index = max(max(pair) for pair in dcm[1])
    #     num_phys_qubits = max_qubit_index + 1

    #     if circuit.num_qubits <= num_phys_qubits:
    #         # Transpile the circuit for the target device
    #         transpiled_circuit = transpile(circuit, coupling_map=dcm[1],optimization_level=0)

    #         # Get the number of swaps used
    #         num_swaps = transpiled_circuit.count_ops().get('swap', 0)

    #         # Print the number of swaps
    #         print(f"Number of swaps used: {num_swaps}")
    #         d = [b, num_swaps, dcm[0]]
    #         data.append(d)

df =  pd.DataFrame(data, columns =   ["benchmarks names","number of swaps", "device name"]) 
#writer = pd.ExcelWriter(curdir + "/compilation_res.xlsx", engine='openpyxl', mode='a', if_sheet_exists='overlay')
#file = pd.read_excel(r'C:/Users/mbandic/Desktop/PhD/Code/Subgraph isomorphism project/compilation_res.xlsx')
#df.to_excel(writer,index=False,header=False,startrow=len(file)+1)
df.to_excel(curdir + "/compilation_results.xlsx", index=False)
#writer.close()