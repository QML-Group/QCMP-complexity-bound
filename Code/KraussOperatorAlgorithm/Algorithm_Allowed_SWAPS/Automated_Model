import numpy as np
import networkx as nx
import scipy as sp
import time 
from numpy import linalg as LA
from scipy.linalg import expm
import matplotlib.pyplot as plt

start_time=time.time()

beta = .1
#n=6
SWAPS = []

##Read in the set of graphs. This should be changed to the graphs which Median also uses. 
G2 = nx.read_graph6('/Users/s.b.szkudlarek/Documents/1 - Study/MSc/MSc Thesis/Code/Entropy sepctrum all + data/graph4.g6')
G2L = [None]*len(G2)
for i in range(len(G2)):
    G2L[i]=nx.to_numpy_array(G2[i])

#Assign the graphs to the CG and IG 
#IG=G2L[8]
#CG=G2L[7]
#CG = np.array([[0,1,1,1,1,0],[1,0,1,1,1,1],[1,1,0,1,1,1],[1,1,1,0,1,1],[1,1,1,1,0,1],[0,1,1,1,1,0]])
#IG = np.array([[0,1,1,1,1,1],[1,0,1,1,1,1],[1,1,0,1,1,1],[1,1,1,0,1,1],[1,1,1,1,0,1],[1,1,1,1,1,0]])
#IG = np.array([[0,0,0,0,1,0],[0,0,0,0,1,0],[0,0,0,0,0,1],[0,0,0,0,0,1],[1,1,0,0,0,0],[0,0,1,1,0,0]])
#CG=np.array([[0,0,1,0],[0,0,0,1],[1,0,0,1],[0,1,1,0]])
#CG = np.array([[0,1,0,1,0,0],[1,0,1,0,0,0],[0,1,0,1,0,0],[1,0,1,0,1,0],[0,0,0,1,0,1],[0,0,0,0,1,0]])
#IG = np.array([[0,1,0,0,0,1],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]])
#CG = np.array([[0,1,1,0,0,0],[1,0,0,0,0,0],[1,0,0,1,0,0],[0,0,1,0,0,1],[0,0,0,0,0,1],[0,0,0,1,1,0]])
#IG = np.array([[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0]])
#CG = np.array([[0,1,0,0,0,1],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]])
#IG = np.array([[0,1,0,0,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[0,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0]])
#CG = np.array([[0,1,0,1,0,0],[1,0,0,0,0,1],[0,0,0,1,1,0],[1,0,1,0,0,0],[0,0,1,0,0,1],[0,1,0,0,1,0]])
#CG = np.array([[0,0,1,1,0,0],[0,0,0,1,0,1],[1,0,0,0,1,0],[1,1,0,0,0,0],[0,0,1,0,0,1],[0,1,0,0,1,0]])
#IG = np.array([[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1],[0,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0]])
#Graphs Medina 1 - 2 SWAPS
#CG = np.array([[0,0,1,0,0],[0,0,1,0,0],[1,1,0,1,1],[0,0,1,0,0],[0,0,1,0,0]])
#IG = np.array([[0,1,1,0,0],[1,0,1,0,0],[1,1,0,1,1],[0,0,1,0,1],[0,0,1,1,0]])
#CG = np.array([[0,1,1,1,1],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0]])
#IG = np.array([[0,1,0,0,0],[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,1],[0,0,0,1,0]])
#Graphs Medina 2 - 3 SWAPS - high beta value -- 2 SWAPS low beta value
#CG = np.array([[0,1,0,0,0,1],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]])
#IG = np.array([[0,1,1,1,0,1],[1,0,1,0,0,0],[1,1,0,1,0,0],[1,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]])
#CG = np.array([[0,1,1,0,0,0],[1,0,0,0,0,1],[1,0,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[0,1,0,0,1,0]])
#IG = np.array([[0,0,1,1,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]])
#CG = np.array([[0,0,0,0,1,1],[0,0,1,1,0,0],[0,1,0,0,0,1],[0,1,0,0,1,0],[1,0,0,1,0,0],[1,0,1,0,0,0]])
#IG = np.array([[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]])
#Graphs Medina 3 - 3 SWAPS
#CG = np.array([[0,1,0,0,0,1],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]])
#IG = np.array([[0,1,1,0,0,1],[1,0,1,0,0,1],[1,1,0,1,0,1],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,1,1,0,1,0]])
#CG = np.array([[0,1,1,0,0,0],[1,0,0,0,0,1],[1,0,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[0,1,0,0,1,0]])
#IG = np.array([[0,0,1,0,0,0],[0,0,0,0,0,1],[1,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,1,1,0,0,0]])
#CG = np.array([[0,0,1,1,0,0],[0,0,1,0,0,1],[1,0,1,0,0,0],[1,0,0,0,1,0],[0,0,0,1,0,1],[0,1,0,0,1,0]])
#IG = np.array([[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0]])
#Graphs Medina 4 - 2 SWAPS (THIS EXAMPLE GIVES THE COMPLEX ERROR)
CG = np.array([[0,0,0,0,1],[0,0,0,0,1],[0,0,0,0,1],[0,0,0,0,1],[1,1,1,1,0]])
IG = np.array([[0,1,0,1,1],[1,0,1,0,1],[0,1,0,1,1],[1,0,1,0,1],[1,1,1,1,0]])
#CG = np.array([[0,1,1,1,1],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[1,0,0,0,0]])
#IG = np.array([[0,1,0,1,0],[1,0,1,0,0],[0,1,0,1,0],[1,0,1,0,0],[0,0,0,0,0]])
#Graphs Medina 5 - 2 SWAPS 
#CG = np.array([[0,0,0,0,1],[0,0,0,0,1],[0,0,0,0,1],[0,0,0,0,1],[1,1,1,1,0]])
#IG = np.array([[0,1,1,1,1],[1,0,1,0,0],[1,1,0,1,0],[1,0,1,0,1],[1,0,0,1,0]])
#CG2 = CG_swap(0,4,CG1)
#IG2 = IG_iteration(IG1,CG1)
#CG = CG_swap(0,2,CG2)
#IG = IG_iteration(IG2,CG2)
#At this step np.sum(IG_iteration(IG,CG))=0 and the code can stop

#Graphs Medina 6 - .. SWAPS
#CG = np.array([[0,1,0,0,0,1],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]])
#IG BAD
#IG = np.array([[0,1,1,0,0,0],[1,0,1,1,1,0],[1,1,0,1,1,0],[0,1,1,0,0,1],[0,1,1,1,0,1],[0,0,0,1,1,0]])
#IG = np.array([[0,1,0,0,0,1],[1,0,1,0,1,1],[0,1,0,1,0,1],[0,0,1,0,1,0],[0,1,0,1,0,1],[1,1,1,0,1,0]])
#CG2 = CG_swap(1,0,CG1)
#IG2 = IG_iteration(IG1,CG1)
#CG3 = CG_swap(5,1,CG2)
#IG3 = IG_iteration(IG2,CG2)
#CG = CG_swap(5,0,CG3)
#IG = IG_iteration(IG3,CG3)
#8 Node
#CG = np.array([[0,1,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0],[0,0,1,0,1,0,0,0],[0,0,0,1,0,1,0,0],[0,0,0,0,1,0,1,0],[0,0,0,0,0,1,0,1],[1,0,0,0,0,0,1,0]])
#IG = np.array([[0,1,0,1,1,0,0,1],[1,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0],[1,0,1,0,1,0,0,0],[1,0,0,1,0,1,0,0],[0,0,0,0,1,0,1,0],[0,0,0,0,0,1,0,1],[1,0,0,0,0,0,1,0]])

n=len(CG)

#Functions for the preprocessing and importing of the graphs which we want to use.
#function which converts a Networkx graph to a Laplacian Matrix
def G_to_LM(x):
    LM = sp.sparse.csr_matrix.toarray(nx.laplacian_matrix(nx.from_numpy_matrix(x)))
    return LM
def G_to_LM_eig(x):
    LM = sp.sparse.csr_matrix.toarray(nx.laplacian_matrix(nx.from_numpy_matrix(x)))
    L = np.zeros((n,n))
    for i in range(n):
        L[i][i]=np.linalg.eig(LM)[0][i]
    return L
#function which converts a numpy array of a graph to a density matrix
def rho(x):
    rho = sp.linalg.expm(-beta*G_to_LM(x))/np.trace((sp.linalg.expm(-beta*G_to_LM_eig(x))))
    return rho
#function which determines the Von Neuman Entropy of a density matrix
def S(x):
    return -sum(np.linalg.eig(x)[0]*np.log2(np.linalg.eig(x)[0]))
#function which determines the Q_jsd for two given density matrices
def Q_jsd(x,y):
    sum_xy = (x+y)/2
    f = S(sum_xy)-(S(x)+S(y))/2
    return f

#function which determines the IG once the intial CG has been performed, in which y is the CG and x the IG 
def IG_iteration(x,y):
    IG_new = x-y
    IG_new[IG_new<0]=0
    return IG_new
#function which determines the new CG based on the SWAP we would like to perform. In which z is the CG and x&y are the node to be swapped. 
def CG_swap(x,y,z):
    CG_new = z.copy()
    for i in range(n):
        if z[x][i]==1 and i!=y:
            CG_new[y][i]=1
            CG_new[x][i]=0
            CG_new[i][y]=1
            CG_new[i][x]=0
    for i in range(n):
        if z[y][i]==1 and i!=x:
            CG_new[x][i]=1
            CG_new[y][i]=0
            CG_new[i][x]=1
            CG_new[i][y]=0
    return CG_new

#Optimisation function & constraints
#generate the permutation matrices (PM)
def permutation_matrix(CG):
    pms = []
    swap_index = []
    for j in range(n):
        for i in range(n-j):
            if CG[j][i+j]==1:
                swap_allowed=np.identity(n)
                swap_allowed[i+j][i+j]=0
                swap_allowed[j][j]=0
                swap_allowed[i+j][j]=1
                swap_allowed[j][i+j]=1
                index=[None]*2
                index[0]=i+j
                index[1]=j
                swap_index.append(index)
                pms.append(swap_allowed)
    return pms, swap_index

def optimize(CG,IG):
    pms = permutation_matrix(CG)[0]
    swap_index = permutation_matrix(CG)[1]
    #Define the function which we want to optimize 
    def f(x):
        f = 0
        #define the krauss operator in terms of the PM and x
        #Make a second loop which allows for a SUM of Kraus operators. 
        sigma = np.zeros((n,n))
        for i in range(len(pms)):
            sigma += ((np.dot(np.dot(np.sqrt(x[i])*pms[i],rho(CG)),np.sqrt(x[i])*pms[i])))
        f = Q_jsd(sigma,rho(IG))
        return f

    #Format the constraints for Optimisation
    def constraint1(x):
        return np.array([np.sum(x)-1])   
    con1 = {'type': 'eq', 'fun': constraint1}
    bounds = [(0,1)]
    cons=[con1]

    #Optimize for the function f 
    #Generate a random set of theta's with a value between 0-1
    x0 = np.random.uniform(0,1,len(pms))
    #Preform the optimizatoion
    sol = sp.optimize.minimize(f,x0,constraints=cons,bounds=bounds,method='SLSQP',tol=1e-18)

    #print the results in such a manner that they can be analysed
    index = []
    P = []
    res = []
    for i in range(len(pms)):
        res.append(sol.x[i])
        index.append(i)
        P.append(pms[i])
    print(sol)
    print(res)
    print(x0)
    print(P)
    print(swap_index[np.argmax(res)])
    print(np.sum(IG_iteration(IG,CG)))
    print(f(x0),Q_jsd(rho(CG),rho(IG)),sol.fun)
    print(f(x0)-sol.fun,Q_jsd(rho(IG),rho(CG))-sol.fun)
    print("--- %s seconds ---" % (time.time() - start_time))
    SWAPS.append(swap_index[np.argmax(res)])
    return SWAPS

i=0
while np.sum(IG_iteration(IG,CG))!=0: 
    s = optimize(CG,IG)
    IG = IG_iteration(IG,CG)
    CG = CG_swap(s[i][0],s[i][1],CG)
    i+=1
    
print(SWAPS, len(SWAPS))